# @param {String} str1
# @param {String} str2
# @return {String}
def gcd_of_strings(str1, str2)
  longer = str1.length >= str2.length ? str1 : str2
  max_leng = 0

  res = ""
  longer.chars.each_with_index do |letter, index|
    scope = longer[0..index]
    return "" unless (str1.include? scope.chars.last) && (str2.include? scope.chars.last)

    str1_count = str1.gsub(scope,"").chars.count
    str2_count = str2.gsub(scope,"").chars.count

    # Seguir mirando la clave esta en str1_count y el st2_couunt si no dan 0 se guarda  y si el siguiente el digito es diferente en los dos se rompe si no continua,
    next unless ((str1_count + str2_count) == 0) && (scope.length >= max_leng)
    res = scope
    max_leng
  end

  res
end

# Python
# class Solution(object):
#   def gcdOfStrings(self, str1, str2):
#     if str1 + str2 != str2 + str1:
#       return ""
#     if len(str1) == len(str2):
#       return str1
#     if len(str1) > len(str2):
#       return self.gcdOfStrings(str1[len(str2):], str2)
#     return self.gcdOfStrings(str1, str2[len(str1):])
#

#Ruby
# def gcd_of_strings(str1, str2)
#     return str1 if str1 == str2
#     if str1.size >= str2.size
#         long, short = str1, str2
#     else long, short = str2, str1
#     end
#     s = short.size
#     return "" unless short == long[...s]
#     gcd_of_strings(short, long[s..])
# end
#
# require 'test/unit'
# class Test_gcd_of_strings < Test::Unit::TestCase
#     def test_
#         assert_equal "ABC", gcd_of_strings(str1 = "ABCABC", str2 = "ABC")
#         assert_equal "AB", gcd_of_strings(str1 = "ABABAB", str2 = "ABAB")
#         assert_equal "", gcd_of_strings(str1 = "LEET", str2 = "CODE")
#     end
# end

str1 = "FPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVEDFPTWRGMUGUSRVGGQEVED"
str

puts gcd_of_strings(str1, str2) # ABC

